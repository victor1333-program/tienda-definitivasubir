// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ================================
// USUARIOS Y AUTENTICACIÓN
// ================================

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  role          Role      @default(CUSTOMER)
  phone         String?
  password      String?   
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  accounts Account[]
  sessions Session[]
  orders   Order[]
  designs  Design[]
  addresses Address[]
  materialMovements MaterialMovement[]

  @@map("users")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

model Address {
  id         String  @id @default(cuid())
  userId     String
  name       String
  street     String
  city       String
  state      String
  postalCode String
  country    String  @default("ES")
  isDefault  Boolean @default(false)

  user   User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  orders Order[]

  @@map("addresses")
}

// ================================
// PRODUCTOS Y CATÁLOGO
// ================================

model Category {
  id          String    @id @default(cuid())
  name        String
  slug        String    @unique
  description String?
  image       String?
  isActive    Boolean   @default(true)
  sortOrder   Int       @default(0)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  productCategories ProductCategory[]
  menuItems MenuItem[]

  @@map("categories")
}

// Tabla de relación para múltiples categorías por producto
model ProductCategory {
  id         String   @id @default(cuid())
  productId  String
  categoryId String
  isPrimary  Boolean  @default(false) // Categoría principal
  createdAt  DateTime @default(now())

  product  Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  category Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)

  @@unique([productId, categoryId])
  @@map("product_categories")
}

// Tabla de relación para múltiples proveedores por producto
model ProductSupplier {
  id         String   @id @default(cuid())
  productId  String
  supplierId String
  isPrimary  Boolean  @default(false) // Proveedor principal
  cost       Float?   // Coste específico de este proveedor
  minOrder   Int?     // Pedido mínimo
  leadTime   Int?     // Tiempo de entrega en días
  createdAt  DateTime @default(now())

  product  Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  supplier Supplier @relation(fields: [supplierId], references: [id], onDelete: Cascade)

  @@unique([productId, supplierId])
  @@map("product_suppliers")
}

model Product {
  id          String   @id @default(cuid())
  name        String
  slug        String   @unique
  sku         String?  @unique // SKU del producto principal
  description String?
  
  // Precios mejorados
  basePrice       Float   // Precio base actual
  comparePrice    Float?  // Precio de comparación (para mostrar tachado)
  costPrice       Float?  // Coste del artículo (para márgenes)
  
  // Multimedia
  images          String  @default("[]") // JSON array de URLs de imágenes
  videos          String  @default("[]") // JSON array de URLs de videos
  documents       String  @default("[]") // JSON array de URLs de documentos
  
  // Precios por cantidad
  hasQuantityPricing Boolean @default(false)
  quantityPrices     String  @default("[]") // JSON array de rangos de precios
  
  // Estado y configuración
  isActive    Boolean  @default(true)
  featured    Boolean  @default(false)
  sortOrder   Int      @default(0)

  // Personalización (comentado por ahora)
  // personalizationType PersonalizationType
  materialType        String? // "cotton", "polyester", "wood", etc.
  canCustomize        Boolean @default(true)
  customizationPrice  Float   @default(0)

  // SEO
  metaTitle       String?
  metaDescription String?

  // Fechas
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relaciones múltiples
  categories        ProductCategory[] // Múltiples categorías
  suppliers         ProductSupplier[] // Múltiples proveedores
  variants          ProductVariant[]
  orderItems        OrderItem[]
  designs           Design[]
  workshopProcesses WorkshopProcess[]
  menuItems         MenuItem[]

  @@map("products")
}

model ProductVariant {
  id       String  @id @default(cuid())
  sku      String  @unique
  size     String?
  
  // Color mejorado
  colorName    String? // Nombre del color (ej: "Rojo", "Azul")
  colorHex     String? // Código hexadecimal (#FF0000)
  colorDisplay String? // Para mostrar en la web (nombre o hex)
  
  material String?
  stock    Int     @default(0)
  price    Float?  // Si es null, usa basePrice del producto
  isActive Boolean @default(true)

  productId String
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  orderItems OrderItem[]
  inventory  InventoryMovement[]
  demandForecasts DemandForecast[]
  stockAlerts     StockAlert[]
  stockReservations StockReservation[]

  @@map("product_variants")
}

model InventoryMovement {
  id          String        @id @default(cuid())
  variantId   String
  type        MovementType
  quantity    Int
  reason      String?
  userId      String?
  createdAt   DateTime      @default(now())

  variant ProductVariant @relation(fields: [variantId], references: [id])

  @@map("inventory_movements")
}

model Supplier {
  id          String   @id @default(cuid())
  name        String
  contactName String?
  email       String?
  phone       String?
  address     String?
  website     String?
  notes       String?
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  materials        Material[]
  purchaseOrders   PurchaseOrder[]
  productSuppliers ProductSupplier[]

  @@map("suppliers")
}

model Material {
  id                String              @id @default(cuid())
  name              String
  description       String?
  sku               String              @unique
  unit              MaterialUnit
  currentStock      Float               @default(0)
  minimumStock      Float               @default(0)
  maximumStock      Float?
  costPerUnit       Float               @default(0)
  supplierId        String?
  supplier          Supplier?           @relation(fields: [supplierId], references: [id])
  location          String?
  category          MaterialCategory
  isActive          Boolean             @default(true)
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
  
  movements         MaterialMovement[]
  demandForecasts   DemandForecast[]
  stockAlerts       StockAlert[]
  processRequirements ProcessMaterial[]

  @@map("materials")
}

model MaterialMovement {
  id         String             @id @default(cuid())
  materialId String
  material   Material           @relation(fields: [materialId], references: [id], onDelete: Cascade)
  type       MaterialMovementType
  quantity   Float
  unitCost   Float?
  reason     String?
  userId     String?
  user       User?              @relation(fields: [userId], references: [id])
  createdAt  DateTime           @default(now())

  @@map("material_movements")
}

model PurchaseOrder {
  id           String               @id @default(cuid())
  orderNumber  String               @unique
  supplierId   String
  supplier     Supplier             @relation(fields: [supplierId], references: [id])
  status       PurchaseOrderStatus  @default(PENDING)
  totalAmount  Float                @default(0)
  notes        String?
  expectedDate DateTime?
  receivedDate DateTime?
  createdAt    DateTime             @default(now())
  updatedAt    DateTime             @updatedAt

  @@map("purchase_orders")
}

model DemandForecast {
  id           String   @id @default(cuid())
  materialId   String?
  variantId    String?
  material     Material? @relation(fields: [materialId], references: [id])
  variant      ProductVariant? @relation(fields: [variantId], references: [id])
  predictedDemand Float
  confidence   Float    // 0-1 confidence score
  period       String   // e.g., "2024-W01", "2024-01"
  algorithm    String   @default("moving_average")
  createdAt    DateTime @default(now())

  @@map("demand_forecasts")
}

model StockAlert {
  id         String         @id @default(cuid())
  type       StockAlertType
  materialId String?
  variantId  String?
  material   Material?      @relation(fields: [materialId], references: [id])
  variant    ProductVariant? @relation(fields: [variantId], references: [id])
  threshold  Float
  currentStock Float
  message    String
  isResolved Boolean        @default(false)
  createdAt  DateTime       @default(now())
  resolvedAt DateTime?

  @@map("stock_alerts")
}

// ================================
// DISEÑOS Y PERSONALIZACIÓN
// ================================

model Design {
  id          String   @id @default(cuid())
  name        String
  description String?
  imageUrl    String
  designData  Json     // Datos del editor (Fabric.js)
  isPublic    Boolean  @default(false)
  isTemplate  Boolean  @default(false)
  tags        String // JSON string para múltiples tags
  category    String?

  productId String?
  product   Product? @relation(fields: [productId], references: [id])

  createdById String
  createdBy   User   @relation(fields: [createdById], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  orderItems OrderItem[]

  @@map("designs")
}

// ================================
// PEDIDOS Y VENTAS
// ================================

model Order {
  id            String      @id @default(cuid())
  orderNumber   String      @unique
  status        OrderStatus @default(PENDING)
  totalAmount   Float
  shippingCost  Float       @default(0)
  taxAmount     Float       @default(0)

  // Cliente
  customerEmail String
  customerName  String
  customerPhone String?

  // Envío
  shippingMethod String
  shippingAddress Json?
  trackingNumber String?

  // Pago
  paymentMethod   String
  paymentStatus   PaymentStatus @default(PENDING)
  stripePaymentId String?

  // Notas
  customerNotes String?
  adminNotes    String?

  // Relaciones
  userId    String?
  user      User?    @relation(fields: [userId], references: [id])
  addressId String?
  address   Address? @relation(fields: [addressId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  orderItems OrderItem[]
  invoices   Invoice[]

  @@map("orders")
}

model OrderItem {
  id               String  @id @default(cuid())
  quantity         Int
  unitPrice        Float
  totalPrice       Float
  
  // Personalización
  customizationData Json?   // Datos de la personalización
  productionNotes   String?
  productionStatus  ProductionStatus @default(PENDING)

  // Relaciones
  orderId   String
  order     Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)

  productId String
  product   Product @relation(fields: [productId], references: [id])

  variantId String?
  variant   ProductVariant? @relation(fields: [variantId], references: [id])

  designId String?
  design   Design? @relation(fields: [designId], references: [id])

  @@map("order_items")
}

model Invoice {
  id            String        @id @default(cuid())
  invoiceNumber String        @unique
  status        InvoiceStatus @default(PENDING)
  
  // Cantidades
  subtotal      Float
  taxRate       Float         @default(0.21) // IVA 21% por defecto en España
  taxAmount     Float
  totalAmount   Float
  
  // Fechas
  issueDate     DateTime      @default(now())
  dueDate       DateTime
  paidDate      DateTime?
  
  // Información del cliente (copia del pedido para histórico)
  customerName    String
  customerEmail   String
  customerPhone   String?
  customerTaxId   String?     // NIF/CIF
  billingAddress  Json        // Dirección de facturación
  
  // Información de la empresa (configuración actual en el momento de la factura)
  companyName     String
  companyAddress  Json
  companyTaxId    String
  companyPhone    String?
  companyEmail    String?
  
  // Detalles de líneas de factura
  lineItems       Json        // Array de items con descripción, cantidad, precio unitario, total
  
  // Notas y términos
  notes           String?
  paymentTerms    String?     // Ej: "Pago a 30 días"
  
  // Archivos generados
  pdfUrl          String?     // URL del PDF de la factura
  
  // Relación con pedido
  orderId   String
  order     Order   @relation(fields: [orderId], references: [id])
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("invoices")
}

// ================================
// CONFIGURACIÓN Y EMPRESA
// ================================

model Setting {
  id    String @id @default(cuid())
  key   String @unique
  value Json
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("settings")
}

model ShippingMethod {
  id          String  @id @default(cuid())
  name        String  @unique
  description String?
  price       Float
  isActive    Boolean @default(true)
  estimatedDays String? // "1-2 días"
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("shipping_methods")
}

model Discount {
  id               String      @id @default(cuid())
  code             String      @unique
  name             String
  type             DiscountType
  value            Float       // Porcentaje o cantidad fija
  minOrderAmount   Float?
  maxOrderAmount   Float?
  maxUses          Int?
  usedCount        Int         @default(0)
  usesPerCustomer  Int?
  isActive         Boolean     @default(true)
  validFrom        DateTime
  validUntil       DateTime?
  
  // Targeting and conditions
  targetType       TargetType  @default(ALL)
  targetIds        Json        @default("[]")
  excludeIds       Json        @default("[]")
  stackable        Boolean     @default(false)
  firstTimeOnly    Boolean     @default(false)
  autoApply        Boolean     @default(false)
  
  // Descriptions and notes
  description      String      @default("")
  internalNotes    String      @default("")
  
  // Advanced restrictions (stored as JSON for flexibility)
  geographicRestrictions Json  @default("[]")
  deviceRestrictions     Json  @default("[]")
  timeRestrictions       Json?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("discounts")
}

// ================================
// CONTACTO Y SOPORTE
// ================================

model ContactSubmission {
  id        String   @id @default(cuid())
  name      String
  email     String
  phone     String?
  subject   String
  message   String
  orderType String?
  status    ContactStatus @default(PENDING)
  adminNotes String?
  resolvedAt DateTime?
  resolvedBy String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("contact_submissions")
}

// ================================
// ENUMS
// ================================

enum Role {
  CUSTOMER
  ADMIN
  SUPER_ADMIN
}

enum PersonalizationType {
  DTF           // Para textiles
  SUBLIMATION   // Para rígidos
  LASER_CUT     // Para madera
  EMBROIDERY    // Para bordado (futuro)
  VINYL         // Para vinilos
}

enum OrderStatus {
  PENDING
  CONFIRMED
  IN_PRODUCTION
  READY_FOR_PICKUP
  SHIPPED
  DELIVERED
  CANCELLED
  REFUNDED
}

enum PaymentStatus {
  PENDING
  PAID
  FAILED
  REFUNDED
  PARTIALLY_REFUNDED
}

enum InvoiceStatus {
  PENDING     // Factura creada pero no enviada
  SENT        // Factura enviada al cliente
  PAID        // Factura pagada
  OVERDUE     // Factura vencida
  CANCELLED   // Factura cancelada
  DRAFT       // Borrador
}

enum ProductionStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
  ON_HOLD
}

enum MovementType {
  IN          // Entrada de stock
  OUT         // Salida de stock
  ADJUSTMENT  // Ajuste de inventario
  RETURN      // Devolución
}

enum DiscountType {
  PERCENTAGE
  FIXED_AMOUNT
  FREE_SHIPPING
  BUY_X_GET_Y
  PROGRESSIVE
}

enum TargetType {
  ALL
  PRODUCTS
  CATEGORIES
  USERS
}

enum MaterialUnit {
  KG          // Kilogramos
  G           // Gramos
  L           // Litros
  ML          // Mililitros
  M           // Metros
  CM          // Centímetros
  M2          // Metros cuadrados
  UNITS       // Unidades
  ROLLS       // Rollos
  SHEETS      // Hojas
}

enum ContactStatus {
  PENDING
  IN_PROGRESS
  RESOLVED
  CLOSED
}

enum MaterialCategory {
  TEXTILES    // Telas, hilos
  INKS        // Tintas DTF, sublimación
  FILMS       // Films DTF, vinilos
  SUBSTRATES  // MDF, metacrilato, etc.
  TOOLS       // Herramientas, accesorios
  PACKAGING   // Embalajes, etiquetas
  CHEMICALS   // Productos químicos
  OTHER       // Otros materiales
}

enum MaterialMovementType {
  PURCHASE    // Compra a proveedor
  CONSUMPTION // Consumo en producción
  ADJUSTMENT  // Ajuste de inventario
  RETURN      // Devolución a proveedor
  WASTE       // Merma o desperdicio
  TRANSFER    // Transferencia entre ubicaciones
}

enum PurchaseOrderStatus {
  PENDING     // Pendiente de envío
  SENT        // Enviado al proveedor
  CONFIRMED   // Confirmado por proveedor
  SHIPPED     // Enviado por proveedor
  RECEIVED    // Recibido completamente
  PARTIALLY_RECEIVED // Recibido parcialmente
  CANCELLED   // Cancelado
}

enum StockAlertType {
  LOW_STOCK   // Stock bajo
  OUT_OF_STOCK // Sin stock
  OVERSTOCK   // Exceso de stock
  EXPIRED     // Material vencido
  REORDER_POINT // Punto de reorden
}

// ================================
// TALLER Y PROCESOS DE PRODUCCIÓN
// ================================

model WorkshopProcess {
  id          String    @id @default(cuid())
  name        String
  description String?
  productId   String
  product     Product   @relation(fields: [productId], references: [id], onDelete: Cascade)
  
  // Configuración del proceso
  estimatedTime    Float     @default(0) // Tiempo estimado en horas
  difficulty       ProcessDifficulty @default(MEDIUM)
  category         ProcessCategory
  isActive         Boolean   @default(true)
  
  // Archivos y recursos
  designFiles      Json      @default("[]") // URLs de archivos de diseño
  instructionFiles Json      @default("[]") // URLs de archivos de instrucciones
  referenceImages  Json      @default("[]") // URLs de imágenes de referencia
  
  // Metadatos
  tags            String    @default("[]") // JSON array de tags
  notes           String?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  
  // Relaciones
  steps           ProcessStep[]
  materialRequirements ProcessMaterial[]
  equipmentRequirements ProcessEquipment[]

  @@map("workshop_processes")
}

model ProcessStep {
  id          String    @id @default(cuid())
  processId   String
  process     WorkshopProcess @relation(fields: [processId], references: [id], onDelete: Cascade)
  
  // Información del paso
  stepNumber  Int
  title       String
  description String
  estimatedTime Float   @default(0) // Tiempo estimado en minutos
  
  // Recursos del paso
  instructions    String?   // Instrucciones detalladas
  imageUrls       Json      @default("[]") // URLs de imágenes del paso
  videoUrls       Json      @default("[]") // URLs de videos del paso
  fileUrls        Json      @default("[]") // URLs de archivos adicionales
  
  // Configuración
  isOptional      Boolean   @default(false)
  requiresQC      Boolean   @default(false) // Requiere control de calidad
  safetyNotes     String?   // Notas de seguridad
  
  // Metadatos
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  @@unique([processId, stepNumber])
  @@map("process_steps")
}

model ProcessMaterial {
  id          String    @id @default(cuid())
  processId   String
  process     WorkshopProcess @relation(fields: [processId], references: [id], onDelete: Cascade)
  materialId  String?
  material    Material? @relation(fields: [materialId], references: [id])
  
  // Información del material requerido
  name        String    // Nombre del material (si no está en la base)
  quantity    Float     // Cantidad requerida
  unit        String    // Unidad de medida
  description String?   // Descripción adicional
  isOptional  Boolean   @default(false)
  
  // Para materiales no inventariados
  estimatedCost Float?  // Costo estimado si no está en inventario
  supplier      String? // Proveedor sugerido
  
  createdAt   DateTime  @default(now())

  @@map("process_materials")
}

model ProcessEquipment {
  id          String    @id @default(cuid())
  processId   String
  process     WorkshopProcess @relation(fields: [processId], references: [id], onDelete: Cascade)
  
  // Información del equipo
  name        String    // Nombre del equipo
  description String?   // Descripción del equipo
  isRequired  Boolean   @default(true)
  
  // Configuración y especificaciones
  specifications String @default("{}") // Especificaciones técnicas JSON
  settings       String @default("{}") // Configuraciones recomendadas JSON
  
  // Alternativas
  alternatives   String @default("[]") // Equipos alternativos JSON
  
  createdAt      DateTime @default(now())

  @@map("process_equipment")
}

model ProcessTemplate {
  id          String    @id @default(cuid())
  name        String
  description String?
  category    ProcessCategory
  
  // Plantilla en JSON
  templateData String   // Estructura completa del proceso JSON
  
  // Metadatos
  isPublic    Boolean   @default(false)
  usageCount  Int       @default(0)
  createdBy   String?   // ID del usuario que lo creó
  
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@map("process_templates")
}

// ================================
// ENUMS PARA TALLER
// ================================

enum ProcessDifficulty {
  EASY      // Fácil - Principiante
  MEDIUM    // Medio - Intermedio
  HARD      // Difícil - Avanzado
  EXPERT    // Experto - Muy avanzado
}

enum ProcessCategory {
  DTF_PRINTING        // Impresión DTF
  SUBLIMATION         // Sublimación
  LASER_CUTTING       // Corte láser
  VINYL_CUTTING       // Corte de vinilo
  EMBROIDERY          // Bordado
  ASSEMBLY            // Ensamblaje
  FINISHING           // Acabados
  QUALITY_CONTROL     // Control de calidad
  PACKAGING           // Empaquetado
  DESIGN              // Diseño
  OTHER               // Otros
}

// ================================
// GESTIÓN DE CONTENIDO Y MENÚS
// ================================

model Menu {
  id          String      @id @default(cuid())
  name        String      // Nombre del menú
  slug        String      @unique // Identificador único
  description String?     // Descripción del menú
  location    MenuLocation @default(HEADER) // Ubicación del menú
  isActive    Boolean     @default(true)
  sortOrder   Int         @default(0)
  
  // Configuración
  maxDepth    Int         @default(3) // Profundidad máxima de anidación
  showOnMobile Boolean    @default(true)
  
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  
  items       MenuItem[]

  @@map("menus")
}

model MenuItem {
  id          String      @id @default(cuid())
  menuId      String
  menu        Menu        @relation(fields: [menuId], references: [id], onDelete: Cascade)
  
  // Información del elemento
  label       String      // Texto que se muestra
  url         String?     // URL personalizada
  target      MenuTarget  @default(SELF) // Cómo abrir el enlace
  
  // Tipo de enlace
  linkType    LinkType    @default(CUSTOM)
  
  // Referencias a contenido interno
  categoryId  String?     // Si apunta a categoría
  category    Category?   @relation(fields: [categoryId], references: [id])
  productId   String?     // Si apunta a producto
  product     Product?    @relation(fields: [productId], references: [id])
  pageType    PageType?   // Tipo de página interna
  
  // Jerarquía
  parentId    String?     // Para submenús
  parent      MenuItem?   @relation("MenuItemHierarchy", fields: [parentId], references: [id])
  children    MenuItem[]  @relation("MenuItemHierarchy")
  sortOrder   Int         @default(0)
  
  // Estado y configuración
  isActive    Boolean     @default(true)
  cssClass    String?     // Clases CSS personalizadas
  icon        String?     // Nombre del icono (lucide-react)
  badge       String?     // Texto de badge/etiqueta
  
  // SEO y accesibilidad
  title       String?     // Atributo title para tooltip
  description String?     // Descripción para SEO
  
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  @@map("menu_items")
}

// ================================
// ENUMS PARA MENÚS
// ================================

enum MenuLocation {
  HEADER      // Menú principal del header
  FOOTER      // Menú del footer
  SIDEBAR     // Menú lateral
  MOBILE      // Menú móvil específico
  BREADCRUMB  // Breadcrumbs
  CATEGORY    // Menú de categorías
}

enum MenuTarget {
  SELF        // _self - misma ventana
  BLANK       // _blank - nueva ventana
  PARENT      // _parent
  TOP         // _top
}

enum LinkType {
  CUSTOM      // URL personalizada
  HOME        // Página de inicio
  CATEGORY    // Categoría de productos
  PRODUCT     // Producto específico
  PAGE        // Página interna
  EXTERNAL    // URL externa
}

enum PageType {
  HOME        // Página de inicio
  ABOUT       // Sobre nosotros
  CONTACT     // Contacto
  TERMS       // Términos y condiciones
  PRIVACY     // Política de privacidad
  FAQ         // Preguntas frecuentes
  BLOG        // Blog
  GALLERY     // Galería
  SERVICES    // Servicios
}

// ================================
// RESERVAS TEMPORALES DE STOCK
// ================================

model StockReservation {
  id          String   @id @default(cuid())
  sessionId   String   // ID de sesión del usuario
  variantId   String
  variant     ProductVariant @relation(fields: [variantId], references: [id], onDelete: Cascade)
  quantity    Int
  expiresAt   DateTime // Fecha de expiración de la reserva
  createdAt   DateTime @default(now())
  
  // Información adicional para tracking
  userId      String?  // Si el usuario está autenticado
  userAgent   String?  // Para identificar el navegador/dispositivo
  ipAddress   String?  // IP del usuario (opcional para analytics)

  @@map("stock_reservations")
  @@index([sessionId])
  @@index([variantId])
  @@index([expiresAt])
}
